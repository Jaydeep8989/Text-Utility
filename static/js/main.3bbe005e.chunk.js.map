{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/Contacts.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutText","onClick","toggleMode","htmlFor","defaultProps","TextForm","handleClearClick","setText","showAlert","useState","text","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","length","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","Contacts","placeholder","App","setMode","setAlert","message","setTimeout","document","body","Date","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3bbe005e.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">                       \r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/contacts\">{props.aboutText}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'Contact US'\r\n  };","import React, {useState} from 'react'\r\nimport './Custom.css';\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=>{ \r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = ()=>{ \r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value) \r\n    }\r\n\r\n    // Credits: A\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(text); \r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n\r\n    // Credits: Coding Wala\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n\r\n    const [text, setText] = useState(''); \r\n    // text = \"new text\"; // Wrong way to change the state\r\n    // setText(\"new text\"); // Correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \r\n            <h2 className='mb-4'>{props.heading}</h2>\r\n            <div className=\"mb-3\"> \r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1 my-1  \" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1 my-1  \" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1 my-1  \" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-1 my-1  \" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-1 my-1  \" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1 my-1  \" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n            <p>{0.008 *  text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Nothing to preview!\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\n\r\nexport default function Contacts(props) {\r\n\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white'\r\n    // }) \r\n\r\n    const weldone =()=>{\r\n        alert(\"Thank You for your vaulable feedback.\");\r\n    }\r\n    \r\n    return (\r\n        <div className=\"contanier\" style={{color: props.mode=== 'light'?'#042743':'white'}}>\r\n            <center>\r\n                <h1 className=\"my-4\" style={{color: props.mode=== 'light'?'#042743':'white'}}>Contact Us</h1>\r\n            </center>\r\n            <center>\r\n                <h6>Please feel free to contact us. We appreciate your feedback in case you have a technical problem, have a suggestion for a new functionality or a change to an existing one.</h6>\r\n            </center>\r\n            <center>\r\n                <h2 className=\"my-3\">Feedback</h2>   \r\n            </center>\r\n            <div className=\"mb-3\">         \r\n                <textarea className=\"form-control\" id=\"mybox\" rows=\"8\" placeholder=\"Please write your valuable feedback\"></textarea>\r\n            </div>\r\n            <div>\r\n                <button className=\"btn btn-primary mx-1 my-2\" onClick={weldone}>Send Feedback</button>                   \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\nimport React, { useState } from 'react';\r\nimport Alert from './components/Alert';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Contacts from './components/Contacts';\r\n\r\n \r\nfunction App() {\r\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type)=>{\r\n      setAlert({\r\n        msg: message,\r\n        type: type\r\n      })\r\n      setTimeout(() => {\r\n          setAlert(null);\r\n      }, 1500);\r\n  }\r\n\r\n  const toggleMode = ()=>{\r\n    if(mode === 'light'){\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = '#042743';\r\n      showAlert(\"Dark mode has been enabled\", \"success\");\r\n    }\r\n    else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Light mode has been enabled\", \"success\");\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n    <Router>\r\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} key={new Date()} />\r\n    <Alert alert={alert}/>\r\n    <div className=\"container my-3\">\r\n    <Switch>\r\n    {/* /users --> Component 1\r\n        /users/home --> Component 2 */}\r\n          <Route exact path=\"/contacts\">\r\n            <Contacts mode={mode} />\r\n          </Route>\r\n          <Route exact path=\"/\">\r\n            <TextForm showAlert={showAlert} heading=\"TextUtils help you for the words and characters count and remove the extra spaces from sentences. \" mode={mode}/>\r\n          </Route>\r\n    </Switch>\r\n    </div>\r\n    </Router>\r\n    </> \r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}